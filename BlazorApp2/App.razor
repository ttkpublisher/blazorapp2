@using System.IdentityModel.Tokens.Jwt
@using BlazorApp2.Service
@using Microsoft.IdentityModel.Tokens
@inject NavigationManager _nav
@inject NotificationService NotificationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Router OnNavigateAsync="CheckToken" AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    [Inject] IAuthenticationService authenticationService { get; set; }

    private async Task CheckToken(NavigationContext context)
    {
        if (!_nav.ToAbsoluteUri(_nav.Uri).AbsoluteUri.Contains("login"))
        {
            string idToken = await localStorage.GetItemAsStringAsync("idToken");
            // Vérifie la présence du token lors de chaque changement de page
            if (String.IsNullOrEmpty(idToken))
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erreur", Detail = "Vous avez été déconnecté", Duration = 5000 });
                _nav.NavigateTo("login");
            }
            else
            {
                if(!await authenticationService.CheckToken(idToken))
                {
                    _nav.NavigateTo("login");
                }
            }
            // var handler = new JwtSecurityTokenHandler();
            // var jsonToken = handler.ReadToken(idToken) as JwtSecurityToken;

            // if (jsonToken.ValidTo < DateTime.UtcNow || !jsonToken.Audiences.Contains("6f4m403a7ocbfa16275rpqn7d4") || jsonToken.Issuer != "https://cognito-idp.eu-west-3.amazonaws.com/eu-west-3_BeEZ5qemS")
            // {
            //     _nav.NavigateTo("login", true);
            // }
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}